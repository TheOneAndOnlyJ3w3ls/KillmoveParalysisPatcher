using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System.Threading.Tasks;
using Noggog;
using System.Text.RegularExpressions;

namespace KillmoveParalysisPatcher
{
    public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynKillmoveParalysisPatcher.esp")
                .Run(args);
        }
        
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            System.Console.WriteLine("Starting search for paralysis magic effects!");

            // Create the ConditionFloat item
            ConditionFloat hasItemCondition = new()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 0,
                Data = new GetPairedAnimationConditionData(),
            };

            // Iterate on all magic effects
            foreach (var magicEffectGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IMagicEffectGetter>())
            {
                // Ignore if the condition is already there
                if(magicEffectGetter.Conditions.Contains(hasItemCondition)) {
                    continue;
                }

                // Paralysis keyword or archetype
                if (Settings.PreventKillmoveParalysis &&
                    (magicEffectGetter.HasKeyword(Skyrim.Keyword.MagicParalysis) || 
                    magicEffectGetter.Archetype.Type == MagicEffectArchetype.TypeEnum.Paralysis))
                {
                    var mgef = state.PatchMod.MagicEffects.GetOrAddAsOverride(magicEffectGetter);

                    // Fix the edge case with the last condition being OR
                    if (mgef.Conditions.Count > 0 && mgef.Conditions.Last().Flags.HasFlag(Condition.Flag.OR))
                    {
                        System.Console.WriteLine("condition found with OR");
                        // Add the condition at the beginning
                        mgef.Conditions.Insert(0, hasItemCondition);
                        //mgef.Conditions!.Last().Flags.SetFlag(Condition.Flag.OR, false);
                    }
                    else
                    {
                        // Add the condition
                        mgef.Conditions.Add(hasItemCondition);
                    }
                }

                // Stagger Archetype
                else if (Settings.PreventKillmoveStagger &&
                    magicEffectGetter.Archetype.Type == MagicEffectArchetype.TypeEnum.Stagger)
                {
                    var mgef = state.PatchMod.MagicEffects.GetOrAddAsOverride(magicEffectGetter);

                    // Fix the edge case with the last condition being OR
                    if (mgef.Conditions.Count > 0 && mgef.Conditions.Last().Flags.HasFlag(Condition.Flag.OR))
                    {
                        // Add the condition at the beginning
                        mgef.Conditions.Insert(0, hasItemCondition);
                        // mgef.Conditions.Last().Flags.SetFlag(Condition.Flag.OR, false);
                    }
                    else
                    {
                        // Add the condition at the end
                        mgef.Conditions.Add(hasItemCondition);
                    }

                }
            }
        }
    }
}
